#include <stdio.h>
#include <stdlib.h>
#define V 10
Int main() {
 Struct queue {
 Int adj[V];
 Int front;
 Int rear;
 }; 
 Struct node {
 Int d;
 Struct node * next;
 };
 Struct Graph {
 Struct node * vertices[V]; 
 Int vis[V];
 Struct edge {
 Int s;
 Int d;
 };
 Struct queue * createQ() {
 Struct queue* Q = malloc(sizeof(struct queue));
Q->front = -1;
Q->rear = -1;
 Return Q;
 }
 
 Struct queue * enq(struct queue * q, int toVisit){
 Struct queue * Q = q;
 If (Q->rear==-1) Q->front++;
 Q->rear++;
 Q->adj[Q->rear] = toVisit;
 Return Q;
 }
 
 Int deq(struct queue * q){
 Struct queue * Q = q;
 Int removed = Q->adj[Q->front];
 Q->front++;
 Return removed;
 }
 
 Void printQ(struct queue * q){
 Struct queue * Q = q;
 For(int I = Q->front; I < Q->rear; i++){
 Printf(“%d,”,Q->adj[i]);
 }
 Printf(“\n”);
 }
 Struct Graph * e2g(struct edge edges[], int e){
 Struct Graph * graph = (struct Graph *)malloc(sizeof(struct Graph));
For (int I = 0; I < V; i++){
Graph->vertices[i] = NULL; 
 }
 For (int I = 0; I < e; i++){ //loop to add the edges to the graph
 Int src = edges[i].s;
 Int dest = edges[i].d;
 Struct node * newNode = (struct node *)malloc(sizeof(struct node));
 newNode->d = dest; //create a new node for destination
 newNode->next = graph->vertices[src]; 
 graph->vertices[src] = newNode; 
 }
 Return graph;
 }
 Void bfs(struct Graph * gr, int start){
 For (int I = 0; I < V; i++){
 Gr->vis[i] = 0;
 Printf(“>>BFS Traversal<<\n”);
 Struct Graph * graph = gr;
 Struct queue * q = createQ();
 Q = enq(q, start); 
 Graph->vis[start] = 1;
 While (q->front <= q->rear)
 Printf(“%d->”, visit);
 Int visit = deq(q); 
 Struct node * temp = graph->vertices[visit]; 
 While (temp)
 If (graph->vis[temp->d] == 0){
 Q = enq(q, temp->d);
 Graph->vis[temp->d] = 1;
}
Temp = temp->next;
 } 
 }
 Printf(“END\n”); 
 }
 Struct edge edges [] = {{1,2}, {1,3}, {2,3}, {2,4}, {3,4}, {4,5}};
 Int num = sizeof(edges)/sizeof(edges[0]);
 Struct Graph * g = e2g(edges, num);
Bfs(g,1);

 Return 0;
}
