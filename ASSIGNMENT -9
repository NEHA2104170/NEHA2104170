#include<studio h>

#include<stdlib.h>
Struct Node
{
 int key;
 Struct Node *left;
 Struct Node *right;
 Int height;
};
Int height(struct Node *N)
{
 If (N == NULL)
 Return 0;
 Return N->height;
}
Int max(int a, int b)
{
 Return (a > b)? a : b;
Struct Node* newNode(int key)
{
 Struct Node* node = (struct Node*)
Malloc(sizeof(struct Node));
 Node->key = key;
 Node->left = NULL;
 Node->right = NULL;
 Node->height = 1; 
 Return(node);
}
Struct Node *rightRotate(struct Node *y)
{
 Struct Node *x = y->left;
 Struct Node *T2 = x->right;
 x->right = y;
 y->left = T2;
 y->height = max(height(y->left),
 height(y->right)) + 1;
 x->height = max(height(x->left),
 height(x->right)) + 1;
 Return x;
}
Struct Node *leftRotate(struct Node *x)
{
 Struct Node *y = x->right;
 Struct Node *T2 = y->left;
 y->left = x;
 x->right = T2;
 x->height = max(height(x->left), 
 height(x->right)) + 1;
 y->height = max(height(y->left),
 height(y->right)) + 1;
return y;
} 
Int getBalance(struct Node *N)
{
 If (N == NULL)
 Return 0;
 Return height(N->left) – height(N->right);
}
Struct Node* insert(struct Node* node, int key)
{
 If (node == NULL)
 Return(newNode(key));
 If (key < node->key)
 Node->left = insert(node->left, key);
 Else if (key > node->key)
 Node->right = insert(node->right, key);
 Else
 Return node;
 Node->height = 1 + max(height(node->left),
 Height(node->right));
 int balance = getBalance(node);
 if (balance > 1 && key < node->left->key)
 Return rightRotate(node);
 If (balance < -1 && key > node->right->key)
 Return leftRotate(node);
 if (balance > 1 && key > node->left->key)
 {
 Node->left = leftRotate(node->left);
 Return rightRotate(node);
}
 if (balance < -1 && key < node->right->key)
 {
 Node->right = rightRotate(node->right);
 Return leftRotate(node);
 }
 Return node;
}
Void preOrder(struct Node *root)
{
 if(root != NULL)
 {
 Printf(“%d “, root->key);
 preOrder(root->left);
 preOrder(root->right);
 }
}
int main()
{
 Struct Node *root = NULL;
 Root = insert(root, 10);
 Root = insert(root, 20);
 Root = insert(root, 30);
 Root = insert(root, 40);
 Root = insert(root, 50);
 Root = insert(root, 25);
 Printf(“Preorder traversal of the constructed AVL”
“ tree is \n”);
preOrder(root);
 return 0;
}
